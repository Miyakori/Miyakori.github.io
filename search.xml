<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++队列及栈的用法</title>
      <link href="/2023/11/23/c-dui-lie-ji-zhan-de-yong-fa/"/>
      <url>/2023/11/23/c-dui-lie-ji-zhan-de-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="常规队列"><a href="#常规队列" class="headerlink" title="常规队列"></a>常规队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p>底层为大小堆实现，默认使用大顶堆，即队首元素最大。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q1<span class="token punctuation">;</span> <span class="token comment">//大顶堆</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q2； <span class="token comment">//小顶堆</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义结构体重载</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>val<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">cmp</span><span class="token punctuation">&#123;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> test t1<span class="token punctuation">,</span><span class="token keyword">const</span> test t2<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> t1<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>t2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>priority_queue<span class="token operator">&lt;</span>test<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>test<span class="token operator">></span><span class="token punctuation">,</span>cmp<span class="token operator">></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>val<span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">const</span> test t<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> val<span class="token operator">></span>t<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> test t<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> val<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>priority_queue<span class="token operator">&lt;</span>test<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>test<span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span>test<span class="token operator">>></span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用github+hexo搭建博客</title>
      <link href="/2023/07/30/shi-yong-github-hexo-da-jian-bo-ke/"/>
      <url>/2023/07/30/shi-yong-github-hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我在搭建博客时，就想着把<strong>如何搭建博客</strong>作为搭建完博客后的第一篇博客(混乱)，毕竟在这个过程中踩了好多坑，有些问题明明很简单，却因为不熟悉而在这上面花了大量时间。这篇博客也就当作对这个过程的一个复盘，如果其中的内容对你有帮助的话就再好不过了。</p><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>如果是第一次用macOS，需要先安装<code>homebrew</code>，这是一个macOS平台下的软件管理包，类似windows中的<code>pip</code>。在终端中输入如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/huwei1024/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于官网直连可能失败，这里是在<code>gitee</code>上下载。如果使用代理的话，要记得额外给终端设置代理端口。</p><p>安装完成后在终端输入<code>brew -v</code>，若显示版本号，则表明安装成功。</p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后输入<code>node -v</code>和<code>npm -v</code>，返回版本号则表明安装成功。</p><p>为提升下载速度，可给npm换源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry    <span class="token comment">#查看当前源</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/    <span class="token comment">#更换镜像源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>-g</code>表示全局安装，若删去则表示仅在当前文件夹安装。安装完后输入<code>hexo -v</code>，返回版本号则表明安装成功。<br>接着新建一个文件夹（如“blog”）用来存放博客相关文件，输入<code>cd blog</code>进入该目录后，输入如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init        <span class="token comment">#初始化文件夹</span><span class="token function">npm</span> <span class="token function">install</span>      <span class="token comment">#安装相应组件</span>hexo g           <span class="token comment">#生成静态网页</span>hexo s           <span class="token comment">#打开本地服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>全部完成后，打开浏览器，输入<a href="http://localhost:4000/">http://localhost:4000/</a> , 即可在本地查看当前博客界面。想关闭本地服务器，则在终端按下<code>control+c</code>即可。</p><h2 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h2><p>经过上边的步骤，博客已经初步搭建好了，但只能在本地浏览。要想他人也能访问，可将其托管在<code>github</code>上。<br>首先进入<a href="https://github.com/">https://github.com</a> 网页，登陆自己的账号后，点击右上角自己的头像，找到<code>Your repositories</code>，进入后，点击右上角的<code>New</code>新建一个仓库，在<code>Respository name</code>中输入<code>yourname.github.io</code>,这里的<code>yourname</code>是你gitbub账号的名称，即前面<code>Owner</code>中显示的内容。勾选下方<code>Add a README file</code>后，点击最下面的<code>Create repository</code>完成仓库的创建。</p><h2 id="使用git连接Github和本地"><a href="#使用git连接Github和本地" class="headerlink" title="使用git连接Github和本地"></a>使用git连接Github和本地</h2><p>使用如下命令安装<code>git</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，输入如下命令链接你的github账号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"yourname"</span>     <span class="token comment">#你的github账号名称</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"youremail"</span>   <span class="token comment">#注册github账号的邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后输入如下命令生成ssh密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"youremail"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中需要输入的时候直接按<code>回车</code>即可。</p><p>之后输入如下命令获取ssh密钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开<a href="github.com">github</a>，点击头像找到<code>Settings</code>,进入<code>SSH and GPG keys</code>，点击<code>New SSH key</code>，名字可随便取，在<code>key</code>中填入上面生成的ssh密钥，点击<code>Add SSH key</code>完成添加。</p><p>输入如下命令测试是否连接成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果出现了你的用户名，则代表成功</p><h2 id="写文章及发布文章"><a href="#写文章及发布文章" class="headerlink" title="写文章及发布文章"></a>写文章及发布文章</h2><p>先更改一下<code>blog</code>目录中<code>_config.yml</code>文件最后一行的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/yourname/yourname.github.io      <span class="token comment">#你的仓库地址</span>  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入以下命令安装扩展</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建文章</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的文章为<code>.md</code>文件，存储在<code>blog/source/_posts</code>中，可按照<code>markdown</code>格式编辑。<br>编辑完文章后，输入<code>hexo g</code>生成静态网页，输入<code>hexo s</code>可在本地预览(非必需)，输入<code>hexo d</code>将本地文件上传至github。之后只需要在网址输入<code>yourname.github.io</code>即可查看你的博客了(可能会有一点延迟)。</p><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>完成以上的步骤后，博客基本的功能已经实现了，剩下可以通过修改主题对其进行美化。本博客使用的主题是<a href="https://github.com/blinkfox/hexo-theme-matery/tree/develop">hexo-theme-matery</a>，按照作者的说明逐步配置即可。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>不得不说，搭建自己的博客确实是一件非常有意思的事情。由于本人是第一次使用macOS系统，搭建的过程也加深了我对系统的一些了解，总的来说收获颇多。</p><p>最后，<strong>完结撒花！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
